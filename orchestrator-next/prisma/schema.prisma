// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  testHistory   TestHistory[]
  projects      TestProject[]
  teams         TeamMember[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  members     TeamMember[]
  projects    TestProject[]
  invites     TeamInvite[]
  settings    TeamSettings?
}

model TeamSettings {
  id                  String   @id @default(cuid())
  teamId             String   @unique
  notificationsEnabled Boolean  @default(true)
  autoAnalyzeReports  Boolean  @default(true)
  defaultEnvironment  String   @default("DEV")
  customSettings     Json?
  
  team               Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model TeamInvite {
  id          String   @id @default(cuid())
  teamId      String
  email       String
  role        String
  token       String   @unique
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([email])
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  role      String   // ADMIN, MEMBER, VIEWER
  joinedAt  DateTime @default(now())
  settings  Json?    // Configurações específicas do membro no time
  
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

model TestProject {
  id          String   @id @default(cuid())
  userId      String
  teamId      String?
  name        String
  type        String   // KARATE, GATLING, SELENIUM, CYPRESS, PLAYWRIGHT, etc
  framework   String   // Versão específica do framework
  path        String
  description String?
  config      Json?    // Configurações específicas do tipo de projeto
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastRun     DateTime?
  isActive    Boolean  @default(true)
  
  features    TestFeature[]
  history     TestHistory[]
  analyses    TestAnalysis[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  team        Team?    @relation(fields: [teamId], references: [id])
  environments TestEnvironment[]

  @@index([userId])
  @@index([teamId])
  @@unique([userId, name])
}

model TestEnvironment {
  id          String   @id @default(cuid())
  projectId   String
  name        String   // DEV, QA, STAGING, PROD, etc
  variables   Json     // Variáveis de ambiente
  isDefault   Boolean  @default(false)
  
  project     TestProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, name])
}

model TestFeature {
  id          String   @id @default(cuid())
  projectId   String
  name        String
  path        String
  type        String   // API, UI, PERFORMANCE, etc
  category    String
  dataFiles   String[] // Array of file paths
  description String?
  tags        String[]
  config      Json?    // Configurações específicas do tipo de teste
  
  project     TestProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  dependencies TestDependency[]

  @@index([projectId])
  @@unique([projectId, path])
}

model TestDependency {
  id              String   @id @default(cuid())
  featureId       String
  dependencyType  String   // LIBRARY, API, DATABASE, etc
  name            String
  version         String?
  config          Json?    // Configurações específicas da dependência
  
  feature         TestFeature @relation(fields: [featureId], references: [id], onDelete: Cascade)

  @@index([featureId])
}

model TestAnalysis {
  id                String   @id @default(cuid())
  projectId         String
  executionId       String?  // ID da execução específica do teste
  summary           String   @db.Text
  insights          String[] // Array de insights identificados
  recommendations   String[] // Array de recomendações
  riskAreas         String[] // Áreas identificadas como risco
  performanceMetrics Json    // Métricas de performance
  aiModel           String?  // Modelo de IA usado para análise
  createdAt         DateTime @default(now())
  
  project           TestProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  execution         TestHistory? @relation(fields: [executionId], references: [id])

  @@index([projectId])
  @@index([executionId])
}

model TestHistory {
  id          String   @id @default(cuid())
  userId      String
  projectId   String?
  testName    String
  category    String
  status      String
  type        String   // Tipo do teste executado
  environment String   // Ambiente onde foi executado
  startTime   DateTime
  endTime     DateTime?
  duration    Int?
  success     Boolean?
  errorLog    String?  @db.Text
  reportPath  String?
  metrics     Json?    // Métricas específicas do tipo de teste
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project     TestProject? @relation(fields: [projectId], references: [id])
  analysis    TestAnalysis[]
  
  @@index([userId])
  @@index([testName])
  @@index([category])
} 